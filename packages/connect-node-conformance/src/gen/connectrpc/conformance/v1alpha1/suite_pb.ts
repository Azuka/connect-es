// Copyright 2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.3 with parameter "ts_nocheck=false,target=ts"
// @generated from file connectrpc/conformance/v1alpha1/suite.proto (package connectrpc.conformance.v1alpha1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { HTTPVersion, Protocol } from "./config_pb.js";
import { ClientCompatRequest, ClientResponseResult } from "./client_compat_pb.js";

/**
 * @generated from message connectrpc.conformance.v1alpha1.TestSuite
 */
export class TestSuite extends Message<TestSuite> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * If non-empty, the protocols to which this suite applies. If empty,
   * this suite applies to all protocols.
   *
   * @generated from field: repeated connectrpc.conformance.v1alpha1.Protocol relevant_protocols = 2;
   */
  relevantProtocols: Protocol[] = [];

  /**
   * If non-empty, the HTTP versions to which this suite applies. If empty,
   * this suite applies to all HTTP versions.
   *
   * @generated from field: repeated connectrpc.conformance.v1alpha1.HTTPVersion relevant_http_versions = 3;
   */
  relevantHttpVersions: HTTPVersion[] = [];

  /**
   * @generated from field: repeated connectrpc.conformance.v1alpha1.TestCase test_cases = 4;
   */
  testCases: TestCase[] = [];

  constructor(data?: PartialMessage<TestSuite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.conformance.v1alpha1.TestSuite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relevant_protocols", kind: "enum", T: proto3.getEnumType(Protocol), repeated: true },
    { no: 3, name: "relevant_http_versions", kind: "enum", T: proto3.getEnumType(HTTPVersion), repeated: true },
    { no: 4, name: "test_cases", kind: "message", T: TestCase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestSuite {
    return new TestSuite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestSuite {
    return new TestSuite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestSuite {
    return new TestSuite().fromJsonString(jsonString, options);
  }

  static equals(a: TestSuite | PlainMessage<TestSuite> | undefined, b: TestSuite | PlainMessage<TestSuite> | undefined): boolean {
    return proto3.util.equals(TestSuite, a, b);
  }
}

/**
 * @generated from message connectrpc.conformance.v1alpha1.TestCase
 */
export class TestCase extends Message<TestCase> {
  /**
   * @generated from field: connectrpc.conformance.v1alpha1.ClientCompatRequest request = 1;
   */
  request?: ClientCompatRequest;

  /**
   * @generated from field: connectrpc.conformance.v1alpha1.ClientResponseResult expected_response = 2;
   */
  expectedResponse?: ClientResponseResult;

  constructor(data?: PartialMessage<TestCase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.conformance.v1alpha1.TestCase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: ClientCompatRequest },
    { no: 2, name: "expected_response", kind: "message", T: ClientResponseResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestCase {
    return new TestCase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestCase {
    return new TestCase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestCase {
    return new TestCase().fromJsonString(jsonString, options);
  }

  static equals(a: TestCase | PlainMessage<TestCase> | undefined, b: TestCase | PlainMessage<TestCase> | undefined): boolean {
    return proto3.util.equals(TestCase, a, b);
  }
}

